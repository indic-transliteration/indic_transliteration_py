# -*- coding: utf-8 -*-
"""
test.sanscript
~~~~~~~~~~~~~~

Tests Sanskrit transliteration.

:license: MIT and BSD
"""

from __future__ import unicode_literals

import logging

import pytest

from indic_transliteration import sanscript
# Remove all handlers associated with the root logger object.
from indic_transliteration.sanscript.schemes import roman

for handler in logging.root.handlers[:]:
  logging.root.removeHandler(handler)
logging.basicConfig(
  level=logging.DEBUG,
  format="%(levelname)s:%(asctime)s:%(module)s:%(filename)s:%(lineno)d %(message)s"
)

DATA = {
  sanscript.BENGALI: {
    'vowels': 'ржЕ ржЖ ржЗ ржИ ржЙ ржК ржЛ рза ржМ рзб ржП ржР ржУ ржФ',
    'marks': 'ржХ ржЦрж╛ ржЧрж┐ ржШрзА ржЩрзБ ржЪрзВ ржЫрзГ ржЬрзД ржЭрзв ржЮрзг ржЯрзЗ ржарзИ ржбрзЛ ржврзМ ржгржВ рждржГ ржерзН',
    'consonants': """ржХ ржЦ ржЧ ржШ ржЩ ржЪ ржЫ ржЬ ржЭ ржЮ ржЯ ржа ржб ржв ржг ржд рже ржж ржз ржи ржк ржл ржм ржн ржо
                         ржп рж░ рж▓ ржм рж╢ рж╖ рж╕ рж╣ рд│""",
    'symbols': 'реР ред рее рзж рзз рзи рзй рзк рзл рзм рзн рзо рзп',
    'putra': 'ржкрзБрждрзНрж░',
    'naraIti': 'ржирж░ ржЗрждрж┐',
    'sentence': 'ржзрж░рзНржоржХрзНрж╖рзЗрждрзНрж░рзЗ ржХрзБрж░рзБржХрзНрж╖рзЗрждрзНрж░рзЗ рж╕ржоржмрзЗрждрж╛ ржпрзБржпрзБрждрзНрж╕ржмржГ ред'
  },
  sanscript.DEVANAGARI: {
    'vowels': 'рдЕ рдЖ рдЗ рдИ рдЙ рдК рдЛ реа рдМ реб рдП рдР рдУ рдФ',
    'marks': 'рдХ рдЦрд╛ рдЧрд┐ рдШреА рдЩреБ рдЪреВ рдЫреГ рдЬреД рдЭрев рдЮрег рдЯреЗ рдареИ рдбреЛ рдвреМ рдгрдВ рддрдГ рдереН',
    'consonants': """рдХ рдЦ рдЧ рдШ рдЩ рдЪ рдЫ рдЬ рдЭ рдЮ рдЯ рда рдб рдв рдг рдд рде рдж рдз рди рдк рдл рдм рдн рдо
                         рдп рд░ рд▓ рд╡ рд╢ рд╖ рд╕ рд╣ рд│""",
    'symbols': 'реР ред рее реж рез реи рей рек рел рем рен рео реп',
    'putra': 'рдкреБрддреНрд░',
    'naraIti': 'рдирд░ рдЗрддрд┐',
    'sentence': 'рдзрд░реНрдордХреНрд╖реЗрддреНрд░реЗ рдХреБрд░реБрдХреНрд╖реЗрддреНрд░реЗ рд╕рдорд╡реЗрддрд╛ рдпреБрдпреБрддреНрд╕рд╡рдГ ред'
  },
  sanscript.GUJARATI: {
    'vowels': 'ркЕ ркЖ ркЗ ркИ ркЙ ркК ркЛ рла ркМ рлб ркП ркР ркУ ркФ',
    'marks': 'ркХ ркЦрк╛ ркЧрк┐ ркШрлА ркЩрлБ ркЪрлВ ркЫрлГ ркЬрлД ркЭрлв ркЮрлг ркЯрлЗ ркарлИ ркбрлЛ ркврлМ ркгркВ ркдркГ ркерлН',
    'consonants': """ркХ ркЦ ркЧ ркШ ркЩ ркЪ ркЫ ркЬ ркЭ ркЮ ркЯ рка ркб ркв ркг ркд рке ркж ркз рки ркк ркл ркм ркн рко
                         ркп рк░ рк▓ рк╡ рк╢ рк╖ рк╕ рк╣ рк│""",
    'symbols': 'рлР ред рее рлж рлз рли рлй рлк рлл рлм рлн рло рлп',
    'putra': 'рккрлБркдрлНрк░',
    'naraIti': 'ркирк░ ркЗркдрк┐',
    'sentence': 'ркзрк░рлНркоркХрлНрк╖рлЗркдрлНрк░рлЗ ркХрлБрк░рлБркХрлНрк╖рлЗркдрлНрк░рлЗ рк╕ркорк╡рлЗркдрк╛ ркпрлБркпрлБркдрлНрк╕рк╡ркГ ред'
  },
  sanscript.TITUS: {
    'vowels': 'a ─Б i ─л u ┼л r╠е r╠е╠Д l╠е l╠е╠Д e ai o au',
    'marks': 'ka k╩░─Б gi g╩░─л с╣Еu c┼л c╩░r╠е jr╠е╠Д j╩░l╠е ├▒l╠е╠Д с╣нe с╣н╩░ai с╕Нo с╕Н╩░au с╣Зaс╣Г taс╕е t╩░',
    'consonants': """ka k╩░a ga g╩░a с╣Еa ca c╩░a ja j╩░a ├▒a с╣нa с╣н╩░a с╕Нa с╕Н╩░a с╣Зa ta t╩░a da d╩░a na pa p╩░a ba b╩░a ma
    ya ra la va ┼Ыa с╣гa sa ha с╕╖a""",
    'symbols': 'oс╣Г . .. 0 1 2 3 4 5 6 7 8 9',
    'putra': 'putra',
    'naraIti': 'nara iti',
    'sentence': 'd╩░armakс╣гetre kurukс╣гetre samavet─Б yuyutsavaс╕е .'
  },
  sanscript.HK: {
    'vowels': 'a A i I u U R RR lR lRR e ai o au',
    'marks': """ka khA gi ghI Gu cU chR jRR jhlR JlRR Te Thai Do Dhau
                    NaM taH th""",
    'consonants': """ka kha ga gha Ga ca cha ja jha Ja Ta Tha Da Dha Na
                         ta tha da dha na pa pha ba bha ma
                         ya ra la va za Sa sa ha La""",
    'symbols': 'OM | || 0 1 2 3 4 5 6 7 8 9',
    'putra': 'putra',
    'naraIti': 'nara iti',
    'sentence': 'dharmakSetre kurukSetre samavetA yuyutsavaH |'
  },
  sanscript.ITRANS: {
    'vowels': 'a A i I u U RRi RRI LLi LLI e ai o au',
    'marks': """ka khA gi ghI ~Nu chU ChRRi jRRI jhLLi ~nLLI Te Thai Do Dhau
                    NaM taH th""",
    'consonants': """ka kha ga gha ~Na cha Cha ja jha ~na Ta Tha Da Dha Na
                         ta tha da dha na pa pha ba bha ma
                         ya ra la va sha Sha sa ha La""",
    'symbols': 'OM | || 0 1 2 3 4 5 6 7 8 9',
    'putra': 'putra',
    'naraIti': 'nara iti',
    'sentence': 'dharmakShetre kurukShetre samavetA yuyutsavaH |'
  },
  sanscript.OPTITRANS: {
    'vowels': 'a A i I u U R RR LLi LLI e ai o au',
    'marks': """ka khA gi ghI ~Nu chU ChR jRR jhLLi ~nLLI Te Thai Do Dhau
                    NaM taH th""",
    'consonants': """ka kha ga gha ~Na cha Cha ja jha ~na Ta Tha Da Dha Na
                         ta tha da dha na pa pha ba bha ma
                         ya ra la va sha Sha sa ha La""",
    'symbols': 'OM | || 0 1 2 3 4 5 6 7 8 9',
    'putra': 'putra',
    'naraIti': 'nara iti',
    'sentence': 'dharmaxetre kuruxetre samavetA yuyutsavaH |'
  },
  sanscript.VELTHUIS: {
    'vowels': 'a aa i ii u uu .r .rr .l .ll e ai o au',
    'marks': """ka khaa gi ghii "nu cuu ch.r j.rr jh.l ~n.ll .te .thai .do .dhau
                    .na.m ta.h th""",
    'consonants': """ka kha ga gha "na ca cha ja jha ~na .ta .tha .da .dha .na
                         ta tha da dha na pa pha ba bha ma
                         ya ra la va "sa .sa sa ha La""",
    'symbols': 'O | || 0 1 2 3 4 5 6 7 8 9',
    'putra': 'putra',
    'naraIti': 'nara iti',
    'sentence': 'dharmak.setre kuruk.setre samavetaa yuyutsava.h |'
  },
  sanscript.IAST: {
    'vowels': 'a ─Б i ─л u ┼л с╣Ы с╣Э с╕╖ с╕╣ e ai o au',
    'marks': 'ka kh─Б gi gh─л с╣Еu c┼л chс╣Ы jс╣Э jhс╕╖ ├▒с╕╣ с╣нe с╣нhai с╕Нo с╕Нhau с╣Зaс╣Г taс╕е th',
    'consonants': """ka kha ga gha с╣Еa ca cha ja jha ├▒a с╣нa с╣нha с╕Нa с╕Нha с╣Зa
                         ta tha da dha na pa pha ba bha ma
                         ya ra la va ┼Ыa с╣гa sa ha с╕╗a""",
    'symbols': 'oс╣Г | || 0 1 2 3 4 5 6 7 8 9',
    'putra': 'putra',
    'naraIti': 'nara iti',
    'sentence': 'dharmakс╣гetre kurukс╣гetre samavet─Б yuyutsavaс╕е |'
  },
  sanscript.KOLKATA: {
    'vowels': 'a ─Б i ─л u ┼л с╣Ы с╣Э с╕╖ с╕╣ ─У ai ┼Н au',
    'marks': 'ka kh─Б gi gh─л с╣Еu c┼л chс╣Ы jс╣Э jhс╕╖ ├▒с╕╣ с╣н─У с╣нhai с╕Н┼Н с╕Нhau с╣Зaс╣Г taс╕е th',
    'consonants': """ka kha ga gha с╣Еa ca cha ja jha ├▒a с╣нa с╣нha с╕Нa с╕Нha с╣Зa
                         ta tha da dha na pa pha ba bha ma
                         ya ra la va ┼Ыa с╣гa sa ha с╕╗a""",
    'symbols': 'oс╣Г | || 0 1 2 3 4 5 6 7 8 9',
    'putra': 'putra',
    'naraIti': 'nara iti',
    'sentence': 'dharmakс╣г─Уtr─У kurukс╣г─Уtr─У samav─Уt─Б yuyutsavaс╕е |'
  },
  sanscript.KANNADA: {
    'vowels': 'р▓Е р▓Ж р▓З р▓И р▓Й р▓К р▓Л р│а р▓М р│б р▓П р▓Р р▓У р▓Ф',
    'marks': 'р▓Х р▓Цр▓╛ р▓Чр▓┐ р▓Шр│А р▓Щр│Б р▓Ър│В р▓Ыр│Г р▓Ьр│Д р▓Эр│в р▓Юр│г р▓Яр│З р▓ар│И р▓бр│Л р▓вр│М р▓гр▓В р▓др▓Г р▓ер│Н',
    'consonants': """р▓Х р▓Ц р▓Ч р▓Ш р▓Щ р▓Ъ р▓Ы р▓Ь р▓Э р▓Ю р▓Я р▓а р▓б р▓в р▓г р▓д р▓е р▓ж р▓з р▓и р▓к р▓л р▓м р▓н р▓о
                         р▓п р▓░ р▓▓ р▓╡ р▓╢ р▓╖ р▓╕ р▓╣ р▓│""",
    'symbols': 'р▓Ур▓В ред рее р│ж р│з р│и р│й р│к р│л р│м р│н р│о р│п',
    'putra': 'р▓кр│Бр▓др│Нр▓░',
    'naraIti': 'р▓ир▓░ р▓Зр▓др▓┐',
    'sentence': 'р▓зр▓░р│Нр▓ор▓Хр│Нр▓╖р│Зр▓др│Нр▓░р│З р▓Хр│Бр▓░р│Бр▓Хр│Нр▓╖р│Зр▓др│Нр▓░р│З р▓╕р▓ор▓╡р│Зр▓др▓╛ р▓пр│Бр▓пр│Бр▓др│Нр▓╕р▓╡р▓Г ред'
  },
  sanscript.MALAYALAM: {
    'vowels': 'р┤Е р┤Ж р┤З р┤И р┤Й р┤К р┤Л р╡а р┤М р╡б р┤П р┤Р р┤У р┤Ф',
    'marks': 'р┤Х р┤Цр┤╛ р┤Чр┤┐ р┤Шр╡А р┤Щр╡Б р┤Ър╡В р┤Ыр╡Г р┤Ьр╡Д р┤Эр╡в р┤Юр╡г р┤Яр╡З р┤ар╡И р┤бр╡Л р┤вр╡М р┤гр┤В р┤др┤Г р┤ер╡Н',
    'consonants': """р┤Х р┤Ц р┤Ч р┤Ш р┤Щ р┤Ъ р┤Ы р┤Ь р┤Э р┤Ю р┤Я р┤а р┤б р┤в р┤г р┤д р┤е р┤ж р┤з р┤и р┤к р┤л р┤м р┤н р┤о
                         р┤п р┤░ р┤▓ р┤╡ р┤╢ р┤╖ р┤╕ р┤╣ р┤│""",
    'symbols': 'р┤Ур┤В ред рее р╡ж р╡з р╡и р╡й р╡к р╡л р╡м р╡н р╡о р╡п',
    'putra': 'р┤кр╡Бр┤др╡Нр┤░',
    'naraIti': 'р┤ир┤░ р┤Зр┤др┤┐',
    'sentence': 'р┤зр┤░р╡Нр┤ор┤Хр╡Нр┤╖р╡Зр┤др╡Нр┤░р╡З р┤Хр╡Бр┤░р╡Бр┤Хр╡Нр┤╖р╡Зр┤др╡Нр┤░р╡З р┤╕р┤ор┤╡р╡Зр┤др┤╛ р┤пр╡Бр┤пр╡Бр┤др╡Нр┤╕р┤╡р┤Г ред'
  },
  sanscript.SLP1: {
    'vowels': 'a A i I u U f F x X e E o O',
    'marks': 'ka KA gi GI Nu cU Cf jF Jx YX we WE qo QO RaM taH T',
    'consonants': """ka Ka ga Ga Na ca Ca ja Ja Ya wa Wa qa Qa Ra
                         ta Ta da Da na pa Pa ba Ba ma
                         ya ra la va Sa za sa ha La""",
    'symbols': 'oM . .. 0 1 2 3 4 5 6 7 8 9',
    'putra': 'putra',
    'naraIti': 'nara iti',
    'sentence': 'Darmakzetre kurukzetre samavetA yuyutsavaH .'
  },
  sanscript.WX: {
    'vowels': 'a A i I u U q Q L с╕╣ e E o O',
    'marks': 'ka KA gi GI fu cU Cq jQ JL Fс╕╣ te TE do DO NaM waH W',
    'consonants': """ka Ka ga Ga fa ca Ca ja Ja Fa ta Ta da Da Na
                         wa Wa xa Xa na pa Pa ba Ba ma
                         ya ra la va Sa Ra sa ha с╕╗a""",
    'symbols': 'oM . .. 0 1 2 3 4 5 6 7 8 9',
    'putra': 'puwra',
    'naraIti': 'nara iwi',
    'sentence': 'XarmakRewre kurukRewre samavewA yuyuwsavaH .'
  },
  sanscript.TELUGU: {
    'vowels': 'р░Е р░Ж р░З р░И р░Й р░К р░Л р▒а р░М р▒б р░П р░Р р░У р░Ф',
    'marks': 'р░Х р░Цр░╛ р░Чр░┐ р░Шр▒А р░Щр▒Б р░Ър▒В р░Ыр▒Г р░Ьр▒Д р░Эр▒в р░Юр▒г р░Яр▒З р░ар▒И р░бр▒Л р░вр▒М р░гр░В р░др░Г р░ер▒Н',
    'consonants': """р░Х р░Ц р░Ч р░Ш р░Щ р░Ъ р░Ы р░Ь р░Э р░Ю р░Я р░а р░б р░в р░г р░д р░е р░ж р░з р░и р░к р░л р░м р░н р░о
                         р░п р░░ р░▓ р░╡ р░╢ р░╖ р░╕ р░╣ р░│""",
    'symbols': 'р░Ур░В ред рее р▒ж р▒з р▒и р▒й р▒к р▒л р▒м р▒н р▒о р▒п',
    'putra': 'р░кр▒Бр░др▒Нр░░',
    'naraIti': 'р░ир░░ р░Зр░др░┐',
    'sentence': 'р░зр░░р▒Нр░ор░Хр▒Нр░╖р▒Зр░др▒Нр░░р▒З р░Хр▒Бр░░р▒Бр░Хр▒Нр░╖р▒Зр░др▒Нр░░р▒З р░╕р░ор░╡р▒Зр░др░╛ р░пр▒Бр░пр▒Бр░др▒Нр░╕р░╡р░Г ред'
  },
  sanscript.GUNJALA_GONDI: {
    'vowels': 'ЁС╡а ЁС╡б ЁС╡в ЁС╡г ЁС╡д ЁС╡е р░Л р▒а р░М р▒б ЁС╡з ЁС╡и ЁС╡к ЁС╡л',
    'marks': 'ЁС╡▒ ЁС╡▓ЁС╢К ЁС╡╢ЁС╢Л ЁС╡╖ЁС╢М ЁС╢ДЁС╢Н ЁС╡╗ЁС╢О ЁС╡╝р▒Г ЁС╢Ар▒Д ЁС╢Бр▒в р░Юр▒г ЁС╡╜ЁС╢Р ЁС╡╛ЁС╢С ЁС╢ВЁС╢У ЁС╢ГЁС╢Ф ЁС╡┐ЁС╢Х ЁС╡│ЁС╢Ц ЁС╡┤ЁС╢Ч',
    'consonants': """ЁС╡▒ ЁС╡▓ ЁС╡╢ ЁС╡╖ ЁС╢Д ЁС╡╗ ЁС╡╝ ЁС╢А ЁС╢Б р░Ю ЁС╡╜ ЁС╡╛ ЁС╢В ЁС╢Г ЁС╡┐ ЁС╡│ ЁС╡┤ ЁС╡╕ ЁС╡╣ ЁС╡║ ЁС╢Е ЁС╢Ж ЁС╡о ЁС╡п ЁС╡░
                         ЁС╡м ЁС╢И ЁС╡╡ ЁС╡н р░╢ р░╖ ЁС╢Й ЁС╢З р░│""",
    'symbols': 'ЁС╢Ш ред рее ЁС╢а ЁС╢б ЁС╢в ЁС╢г ЁС╢д ЁС╢е ЁС╢ж ЁС╢з ЁС╢и ЁС╢й',
    'putra': 'ЁС╢ЕЁС╢НЁС╡│ЁС╢ЧЁС╢И',
    'naraIti': 'ЁС╡║ЁС╢И ЁС╡вЁС╡│ЁС╢Л',
    'sentence': 'ЁС╡╣ЁС╢ИЁС╢ЧЁС╡░ЁС╡▒ЁС╢Чр░╖ЁС╢РЁС╡│ЁС╢ЧЁС╢ИЁС╢Р ЁС╡▒ЁС╢НЁС╢ИЁС╢НЁС╡▒ЁС╢Чр░╖ЁС╢РЁС╡│ЁС╢ЧЁС╢ИЁС╢Р ЁС╢ЙЁС╡░ЁС╡нЁС╢РЁС╡│ЁС╢К ЁС╡мЁС╢НЁС╡мЁС╢НЁС╡│ЁС╢ЧЁС╢ЙЁС╡нЁС╢Ц ред'
  }
}


def _compare_all_data_between_schemes(_from, _to):
  """Compare all data for `_from` and `_to`"""

  def compare_group(_from, _to, group):
    """Compare data for `_from` and `_to` in the test group `group`."""
    source = DATA[_from][group]
    actual = ' '.join(sanscript.transliterate(source, _from, _to).split())
    expected = ' '.join(DATA[_to][group].split())
    assert expected == actual, "Failure ahoy: %s to %s: expected %s, got %s" % (_from, _to, expected, actual)

  for group in DATA[_from]:
    if _to in DATA and group in DATA[_to]:
      compare_group(_from, _to, group)



@pytest.mark.parametrize("name", sanscript.SCHEMES)
def test_membership(name):
  """Test that a scheme is roman iff `is_roman`"""
  assert sanscript.SCHEMES[name].is_roman == (name in roman.ALL_SCHEME_IDS)


@pytest.mark.parametrize("name,scheme", sanscript.SCHEMES.items())
def test_correspondence(name, scheme ):
  """Test that schemes correspond to a subset of Devanagari.

  Since Devanagari is the most comprehensive scheme available, every
  scheme corresponds to a subset of Devanagari."""
  dev = sanscript.SCHEMES[sanscript.DEVANAGARI]
  groups = set(dev.keys())
  for group in scheme:
    logging.debug(name)
    logging.debug(group)
    assert group in groups


@pytest.mark.parametrize("from_scheme", roman.ALL_SCHEME_IDS)
@pytest.mark.parametrize("to_scheme", roman.ALL_SCHEME_IDS)
def test_to_roman(from_scheme, to_scheme):
  """Test roman to roman."""
  _compare_all_data_between_schemes(from_scheme, to_scheme)


@pytest.mark.parametrize("from_scheme", roman.ALL_SCHEME_IDS)
@pytest.mark.parametrize("to_scheme", sanscript.BRAHMIC_SCHEMES.keys())
def test_to_brahmic(from_scheme, to_scheme):
  """Test roman to Brahmic."""
  _compare_all_data_between_schemes(from_scheme, to_scheme)


def test_devanaagarii_equivalence():
  """Test all synonmous transliterations."""
  logging.info(sanscript.transliterate("rAmo gUDhaM vaktI~Ngitaj~naH kShetre", sanscript.ITRANS, sanscript.DEVANAGARI))
  assert sanscript.transliterate("rAmo gUDhaM vaktI~Ngitaj~naH kShetre", sanscript.ITRANS, sanscript.DEVANAGARI) == \
                   sanscript.transliterate("raamo guuDhaM vaktii~NgitaGYaH xetre", sanscript.ITRANS, sanscript.DEVANAGARI)


@pytest.mark.parametrize("to_scheme", roman.ALL_SCHEME_IDS)
def test_brahmic_to_roman(to_scheme):
  """Test Brahmic to roman."""
  from_scheme = sanscript.DEVANAGARI
  _compare_all_data_between_schemes(from_scheme, to_scheme)


@pytest.mark.parametrize("to_scheme", sanscript.BRAHMIC_SCHEMES.keys())
def test_devanagari_to_brahmic(to_scheme):
  """Test Brahmic to Brahmic."""
  from_scheme = sanscript.DEVANAGARI
  _compare_all_data_between_schemes(from_scheme, to_scheme)

@pytest.mark.parametrize("scheme_id", sanscript.BRAHMIC_SCHEMES.keys())
def test_vowel_to_mark_map(scheme_id):
  brahmic_scheme = sanscript.SCHEMES[scheme_id]
  assert brahmic_scheme.vowel_to_mark_map[brahmic_scheme.from_devanagari("рдЕ")] == ""
  assert brahmic_scheme.vowel_to_mark_map[brahmic_scheme.from_devanagari("рдЖ")] == brahmic_scheme.from_devanagari("рд╛")
  for vowel in "рдЗ рдИ рдЙ рдК рдП рдР рдУ рдФ".split(" "):
    assert brahmic_scheme.vowel_to_mark_map[brahmic_scheme.from_devanagari(vowel)] == brahmic_scheme.from_devanagari(sanscript.SCHEMES[sanscript.DEVANAGARI].vowel_to_mark_map[vowel]), vowel

## Toggle tests
def _toggle_test_helper(_from, _to):
  def func(data, output):
    assert output == sanscript.transliterate(data, _from, _to), "_from: %s, _to: %s, _input: %s" % (_from, _to, data)

  return func

def test_toggle():
  f = _toggle_test_helper(sanscript.HK, sanscript.DEVANAGARI)
  f('akSa##kSa##ra', 'рдЕрдХреНрд╖kSaрд░')
  f('##akSa##kSa##ra', 'akSaрдХреНрд╖ra')
  f('akSa##ra##', 'рдЕрдХреНрд╖ra')
  f('akSa##ra', 'рдЕрдХреНрд╖ra')
  f('akSa##kSa##ra####', 'рдЕрдХреНрд╖kSaрд░')
  f('a####kSara', 'рдЕрдХреНрд╖рд░')
  f('a#kSara', 'рдЕ#рдХреНрд╖рд░')

def test_suspend():
  f = _toggle_test_helper(sanscript.HK, sanscript.DEVANAGARI)
  f('<p>nara iti</p>', '<p>рдирд░ рдЗрддрд┐</p>')

def test_suspend_and_toggle():
  f = _toggle_test_helper(sanscript.HK, sanscript.DEVANAGARI)
  f('<p>##na##ra## iti</p>', '<p>naрд░ iti</p>')

